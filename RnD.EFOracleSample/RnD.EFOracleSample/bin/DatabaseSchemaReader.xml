<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DatabaseSchemaReader</name>
    </assembly>
    <members>
        <member name="T:DatabaseSchemaReader.CodeGen.ClassBuilder">
            <summary>
            Writes a class while retaining indenting
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.ClassWriter">
            <summary>
            Turns a specified <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTable"/> into a C# class
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.ClassWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.CodeGen.CodeWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.CodeGen.ClassWriter"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="codeWriterSettings">The code writer settings.</param>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.ClassWriter.Write">
            <summary>
            Writes the C# code of the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.ClassWriter.WriteForeignKey(DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            KL:
            Similar to WriteColumn. Will send the appropriate dataType and propertyName to
            _cb.AppendAutomaticProperty to be written.
            
            This method was needed to support composite foreign keys.
            </summary>
            <param name="foreignKey"></param>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeFirst.CodeFirstContextWriter.IsOracle">
            <summary>
            A flag if this is Oracle (Devart)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeFirst.CodeFirstMappingWriter.MappingClassName">
            <summary>
            Gets the name of the mapping class.
            </summary>
            <value>
            The name of the mapping class.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.CodeTarget">
            <summary>
            The target code generation.
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.CodeGen.CodeTarget.Poco">
            <summary>
            Simple plain old CLR entities
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.CodeGen.CodeTarget.PocoNHibernateHbm">
            <summary>
            Entities with NHibernate hbm.xml mappings
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.CodeGen.CodeTarget.PocoNHibernateFluent">
            <summary>
            Entities with NHibernate fluent mappings
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.CodeGen.CodeTarget.PocoEntityCodeFirst">
            <summary>
            Entities with Entity Framework Code First mapping
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.CodeGen.CodeTarget.PocoRiaServices">
            <summary>
            Entities for RIA Services (buddy classes)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.CodeWriter">
            <summary>
            A *simple* code generation
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CodeWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.CodeGen.CodeWriter"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CodeWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseSchema,DatabaseSchemaReader.CodeGen.CodeWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.CodeGen.CodeWriter"/> class.
            </summary>
            <param name="schema">The schema.</param>
            <param name="codeWriterSettings">The code writer settings.</param>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CodeWriter.Execute(System.IO.DirectoryInfo)">
            <summary>
            Uses the specified schema to write class files, NHibernate/EF CodeFirst mapping and a project file. Any existing files are overwritten. If not required, simply discard the mapping and project file. Use these classes as ViewModels in combination with the data access strategy of your choice.
            </summary>
            <param name="directory">The directory to write the files to. Will create a subdirectory called "mapping". The directory must exist- any files there will be overwritten.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.Security.SecurityException"/>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CodeWriter.CreateProjectWriter">
            <summary>
            Creates the project writer, using either 2008 or 2010 format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.CodeWriterSettings">
            <summary>
            Code generation settings. Customize the defaults.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CodeWriterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.CodeGen.CodeWriterSettings"/> class.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.CodeTarget">
            <summary>
            Gets or sets the code target.
            </summary>
            <value>The code target.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.Namer">
            <summary>
            Gets or sets the namer, which translates table and column names to classes and properties.
            </summary>
            <value>
            The namer.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.RequiredErrorMessage">
            <summary>
            Gets or sets the error message for the [Required] attribute. If null, none is written.
            </summary>
            <value>
            The Required error message.
            </value>
            <remarks>
            Format token 0 is replaced with a formatted version of the property name.
            </remarks>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.StringLengthErrorMessage">
            <summary>
            Gets or sets the error message for the [StringLength] attribute. If null, none is written
            </summary>
            <value>
            The StringLength error message.
            </value>
            <remarks>
            Format token 0 is replaced with the maximum length.
            Format token 1 is replaced with a formatted version of the property name.
            </remarks>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.RangeErrorMessage">
            <summary>
            Gets or sets the error message for the [Range] attribute. If null, none is written
            </summary>
            <value>
            The Range error message.
            </value>
            <remarks>
            Format token 0 is replaced with the maximum value.
            Format token 1 is replaced with a formatted version of the property name.
            </remarks>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.UseForeignKeyIdProperties">
            <summary>
            Indicates whether to write two properties for a foreign key: the instance and a shadow scalar id property. Default is <c>false</c> (just write the instance property)
            </summary>
            <remarks>
            Foreign key id properties are convenient in EF Code First. By using them, you can avoid extra database access.
            </remarks>
            <value>
            	<c>true</c> if use foreign key properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.WriteStoredProcedures">
            <summary>
            Gets or sets a value indicating whether to write stored procedures.
            </summary>
            <value>
            	<c>true</c> if write stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.WriteUnitTest">
            <summary>
            Gets or sets a value indicating whether to write a sample unit test
            </summary>
            <value><c>true</c> if writes a unit test; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.WriteProjectFile">
            <summary>
            Gets or sets a value indicating whether to write a csproj project file for .Net 4.0 (VS 2010/2012)
            </summary>
            <value><c>true</c> if to write project file; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.WriteProjectFileNet35">
            <summary>
            Gets or sets a value indicating whether to write a csproj project file for .Net 3.5 (VS 2008)
            </summary>
            <value><c>true</c> if to write project file; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.IncludeViews">
            <summary>
            Gets or sets a value indicating whether to include views.
            </summary>
            <value><c>true</c> if include views; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.CodeWriterSettings.WriteCodeFirstIndexAttribute">
            <summary>
            Gets or sets a value indicating whether properties may include the Code First index attribute.
            </summary>
            <value>
            <c>true</c> if properties are written with the index attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.CollectionNamer">
            <summary>
            Names collections by adding "Collection" at the end. Or use <see cref="T:DatabaseSchemaReader.CodeGen.PluralizingNamer"/>
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.ICollectionNamer">
            <summary>
            Name the collections
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.ICollectionNamer.NameCollection(System.String)">
            <summary>
            Names the collection.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.CollectionNamer.NameCollection(System.String)">
            <summary>
            Names the collection.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.DataTypeWriter">
            <summary>
            Converts column datatypes into string representations of .Net types
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.DataTypeWriter.CodeTarget">
            <summary>
            Gets or sets the code target.
            </summary>
            <value>
            The code target.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.INamer">
            <summary>
            Translates table and column names to classes and properties.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.INamer.Name(DatabaseSchemaReader.DataSchema.NamedObject)">
            <summary>
            Translates the namedObject's Name to a code-friendly name
            </summary>
            <param name="namedObject">The named object.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.INamer.NameCollection(System.String)">
            <summary>
            Names the collection.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.INamer.PrimaryKeyName(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            For a column, returns the property name for a primary key
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.INamer.ForeignKeyName(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Returns the name of a foreign key property for a given foreign key.
            </summary>
            <param name="table">The table.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.INamer.ForeignKeyCollectionName(System.String,DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Returns the name of an inverse foreign key property.
            </summary>
            <param name="targetTable">The target table.</param>
            <param name="table">The table.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.MappingNamer.NameMappingClass(System.String)">
            <summary>
            Names the mapping class for an entity
            </summary>
            <param name="entityName">Name of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.MappingNamer.EntityNames">
            <summary>
            Gets or sets the entity names.
            </summary>
            <value>
            The entity names.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.Namer">
            <summary>
            Translates table and column names to classes and properties.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Namer.Name(DatabaseSchemaReader.DataSchema.NamedObject)">
            <summary>
            Translates the namedObject's Name to a code-friendly name
            </summary>
            <param name="namedObject">The named object.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Namer.NameCollection(System.String)">
            <summary>
            Names the collection.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Namer.PrimaryKeyName(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            For a column, returns the property name for a primary key
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Namer.ForeignKeyName(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Returns the name of a foreign key property for a given foreign key.
            </summary>
            <param name="table">The table.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns></returns>
            <remarks>
            If it is a simple foreign key, it is the NetName of the column
            if it is a composite foreign key, it is the NetName of the foreign table
            if there is a collision with the class name, append "Key"
            If there are multiple foreign keys to one table, ensure they are unique.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Namer.ForeignKeyCollectionName(System.String,DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Returns the name of an inverse foreign key property. Uses <see cref="M:DatabaseSchemaReader.CodeGen.Namer.NameCollection(System.String)"/>
            For single fks, it's a collection using the name of the fk table.
            For multiple fks, it's a collection using the name of the fk columns
            </summary>
            <param name="targetTable">The target table.</param>
            <param name="table">The table.</param>
            <param name="foreignKey">The foreign key.</param>
            <returns>
            Eg OrderLine has fk to Order. Order will have an ICollection&lt;OrderLine&gt; called "OrderLineCollection".
            Multiple fk eg Order has Delivery Address and Billing Address. 
            Address will have an ICollection&lt;Order&gt; called "DeliveryAddressCollection", 
            and another ICollection&lt;Order&gt; called "BillingAddressCollection"
            </returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.NHibernate.FluentMappingWriter.WriteForeignKey(DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            KL: Writes the foreign key an also supports composite foreign keys.
            </summary>
            <param name="foreignKey">The foreign key.</param>
        </member>
        <member name="P:DatabaseSchemaReader.CodeGen.NHibernate.FluentMappingWriter.MappingClassName">
            <summary>
            Gets the name of the mapping class.
            </summary>
            <value>
            The name of the mapping class.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.NameFixer">
            <summary>
            Fixes database names to be pascal case and singular.
            Consider replacing this with something a little more powerful- eg Castle Project inflector 
            https://github.com/castleproject/Castle.ActiveRecord/blob/master/src/Castle.ActiveRecord/Framework/Internal/Inflector.cs
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.NameFixer.ToPascalCase(System.String)">
            <summary>
            Fixes the specified name to be pascal cased and (crudely) singular.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks>
            See C# language specification http://msdn.microsoft.com/en-us/library/aa664670.aspx
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.NameFixer.ToCamelCase(System.String)">
            <summary>
            Fixes the specified name to be camel cased. No singularization.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.NameFixer.MakeSingular(System.String)">
            <summary>
            Very simple singular inflections. "Works on my database" (TM)
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.Nester">
            <summary>
            A simple way to manage nesting
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Nester.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.OverrideWriter.AddOverrides">
            <summary>
            Adds the overrides (composite key version)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.PluralizingNamer">
            <summary>
            Names collections by trying to pluralize them. Use with caution!
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.PluralizingNamer.NameCollection(System.String)">
            <summary>
            Names the collection.
            </summary>
            <param name="className">Name of the class.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.CodeGen.Procedures.ProcedureWriter">
            <summary>
            Write a Stored Procedure ADO class.
            </summary>
            <remarks>
            Uses <see cref="T:DatabaseSchemaReader.CodeGen.Procedures.SprocWriter"/>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Procedures.ProcedureWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.CodeGen.Procedures.ProcedureWriter"/> class.
            </summary>
            <param name="storedProcedure">The stored procedure.</param>
            <param name="ns">The namespace.</param>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Procedures.ProcedureWriter.Write">
            <summary>
            Writes this class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.CodeGen.Procedures.SprocResultWriter.WriteClasses">
            <summary>
            Writes the classes. This is exposed to SprocWriter so it doesn't include usings/namespaces
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Compare.CompareResult">
            <summary>
            Comparison Result, comprising a <see cref="P:DatabaseSchemaReader.Compare.CompareResult.ResultType"/> (Add/Delete/Change) and a <see cref="P:DatabaseSchemaReader.Compare.CompareResult.SchemaObjectType"/> (Table, Column, Constraint etc)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Compare.CompareResult.Find(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Finds the object in the specified database schema, or NULL
            </summary>
            <param name="databaseSchema">The database schema.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">databaseSchema</exception>
            <exception cref="T:System.InvalidOperationException">
            Name required
            or
            TableName required
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.SchemaObjectType">
            <summary>
            Gets or sets the type of the schema object  (Table, Column, Constraint etc).
            </summary>
            <value>
            The type of the schema object.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.ResultType">
            <summary>
            Gets or sets the type of the result  (Add/Delete/Change).
            </summary>
            <value>
            The type of the result.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.Name">
            <summary>
            Gets or sets the name of the object. For certain types (eg Columns) you also need the <see cref="P:DatabaseSchemaReader.Compare.CompareResult.TableName"/>.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.TableName">
            <summary>
            Gets or sets the name of the parent table (if applicable- required for Columns, Constraints, Indexes, Triggers)
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.SchemaOwner">
            <summary>
            Gets or sets the schema owner.
            </summary>
            <value>
            The schema owner.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Compare.CompareResult.Script">
            <summary>
            Gets or sets the SQL script.
            </summary>
            <value>
            The script.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.Compare.CompareSchemas">
            <summary>
            Compares two schemas, and returns a migration script.
            </summary>
            <remarks>
            Take care with sorting. 
            Tables are sorted with those without foreign keys first.
            We don't know the dependency order for views and procedures, so a view that depends on another view may be written first and the script will fail.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Compare.CompareSchemas.#ctor(DatabaseSchemaReader.DataSchema.DatabaseSchema,DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Compare.CompareSchemas"/> class.
            </summary>
            <param name="baseSchema">The base schema.</param>
            <param name="compareSchema">The compare schema.</param>
        </member>
        <member name="M:DatabaseSchemaReader.Compare.CompareSchemas.Execute">
            <summary>
            Run the comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Compare.CompareSchemas.ExecuteResult">
            <summary>
            Run the comparison and returns a <see cref="T:DatabaseSchemaReader.Compare.CompareResult"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Compare.ComparisonWriter">
            <summary>
            Quick facade over migration generator
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Compare.ComparisonWriter.CompareView(System.String,System.String)">
            <summary>
            Sanitized comparison of the view sql
            </summary>
            <param name="view1">The view1.</param>
            <param name="view2">The view2.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Compare.ResultType">
            <summary>
            Result Types- change, add, delete
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.ResultType.Change">
            <summary>
            Changed (altered)
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.ResultType.Add">
            <summary>
            Added (created)
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.ResultType.Delete">
            <summary>
            Deleted (dropped)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Compare.SchemaObjectType">
            <summary>
            
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Table">
            <summary>
            table
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.View">
            <summary>
            view
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Column">
            <summary>
            column
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Constraint">
            <summary>
            constraint
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Index">
            <summary>
            index
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Trigger">
            <summary>
            trigger
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.StoredProcedure">
            <summary>
            stored procedure
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Function">
            <summary>
            function
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Sequence">
            <summary>
            sequence
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Compare.SchemaObjectType.Package">
            <summary>
            package
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.ColumnConverter.Columns(System.String,System.String)">
            <summary>
            Converts the "Columns" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseColumn"/> objects for a specified table
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.ColumnConverter.Columns">
            <summary>
            Converts the "Columns" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseColumn"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.Loaders.ColumnLoader">
            <summary>
            Loads and converts the dataTable (wrapping the Converter). Hides all/byTable logic.
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Conversion.Loaders.ColumnLoader._noColumns">
            <summary>
            <c>True</c> if cannot get columns for all tables
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.DatabaseColumnExtensions.ToDataTable(System.Collections.Generic.List{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Static method to convert a list of columns into a generic DataTable for binding
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Conversion.Loaders.IndexLoader._noIndexColumns">
            <summary>
            <c>True</c> if cannot get indexes for all tables
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.Loaders.SchemaConstraintLoader">
            <summary>
            Loads and converts the dataTable (wrapping the Converter). Hides all/byTable logic.
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.ProviderToSqlType">
            <summary>
            Converts a provider invariant name to a SqlType
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.ProviderToSqlType.Convert(System.String)">
            <summary>
            Converts the specified provider name to a <see cref="T:DatabaseSchemaReader.DataSchema.SqlType"/> or null if unknown.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.SchemaConstraintConverter.Constraints(System.Data.DataTable,DatabaseSchemaReader.DataSchema.ConstraintType,System.String)">
            <summary>
            Converts the "PRIMARY_KEYS", "FOREIGN_KEYS" and "UNIQUE_KEYS" DataTables into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseConstraint"/> objects
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.SchemaConstraintConverter.AddIdentity(System.Data.DataTable,DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Converts the "IdentityColumns" DataTable by updating the Identity column in a table
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.SchemaConverter">
            <summary>
            Converts the DataTables returned by DbConnection.GetSchema into objects.
            Resolves differences between SqlServer and Oracle names
            </summary>
            <remarks>
            SqlServer: http://msdn.microsoft.com/en-us/library/ms254969.aspx
            Oracle: http://msdn.microsoft.com/en-us/library/cc716723.aspx
            Also supports OleDb, MySql, SQLite, DataDirect and Devart providers
            ODP: http://download.oracle.com/docs/html/E15167_01/appSpecificSchema.htm
            Devart: http://www.devart.com/dotconnect/oracle/docs/MetaData.html
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.SchemaConverter.Tables(System.Data.DataTable)">
            <summary>
            Converts the "Tables" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTable"/> objects.
            </summary>
            <remarks>
            Note the SqlServer DataTable includes views, which we explicitly remove. 
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.SchemaConverter.FindSchema(System.Data.DataTable)">
            <summary>
            Finds the first schema (usually COLUMNS table)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.SchemaConverter.Views(System.Data.DataTable)">
            <summary>
            Converts the "Views" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseView"/> objects.
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.TriggerConverter">
            <summary>
            Converts the "Triggers" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTrigger"/> objects
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Conversion.TriggerConverter.Triggers(System.Data.DataTable,System.String)">
            <summary>
            Converts the "Triggers" DataTable into <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTrigger"/> objects
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Conversion.Loaders.ViewColumnLoader">
            <summary>
            Loads and converts the dataTable (wrapping the Converter). Hides all/byTable logic.
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.Conversion.Loaders.ViewColumnLoader._noColumns">
            <summary>
            <c>True</c> if cannot get columns for all views
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DatabaseReader">
            <summary>
            Uses <see cref="T:DatabaseSchemaReader.SchemaReader"/> to read database schema into schema objects (rather than DataTables). 
            </summary>
            <remarks>
            Either load independent objects (list of Tables, StoredProcedures), fuller information (a Table with all Columns, constraints...), or full database schemas (<see cref="M:DatabaseSchemaReader.DatabaseReader.ReadAll"/>: all tables, views, stored procedures with all information; the DatabaseSchema object will hook up the relationships). Obviously the fuller versions will be slow on moderate to large databases.
            </remarks>
        </member>
        <member name="T:DatabaseSchemaReader.IDatabaseReader">
            <summary>
            Read database schema into schema objects
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.ReadAll">
            <summary>
            Gets all of the schema in one call. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.AllUsers">
            <summary>
            Gets the users (specifically for Oracle)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.TableList">
            <summary>
            Gets all tables (just names, no columns).
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.AllTables">
            <summary>
            Gets all tables (plus constraints, indexes and triggers).
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.AllViews">
            <summary>
            Gets all views.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.Table(System.String)">
            <summary>
            Gets the table. If <see cref="P:DatabaseSchemaReader.DatabaseReader.Owner"/> is specified, it is used.
            </summary>
            <param name="tableName">Name of the table. Oracle names can be case sensitive.</param>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.StoredProcedureList">
            <summary>
            Gets all stored procedures (no arguments, for Oracle no packages)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.AllStoredProcedures">
            <summary>
            Gets all stored procedures (and functions) with their arguments
            </summary>
            <remarks>
            <para>We also get the source (if available)</para>
            <para>We don't get functions here.</para>
            <para>In Oracle stored procedures are often in packages. We read the non-packaged stored procedures, then add packaged stored procedures if they have arguments. If they don't have arguments, they are not found.</para>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.IDatabaseReader.DataTypes">
            <summary>
            Gets all datatypes (and updates columns/arguments if already loaded)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.IDatabaseReader.Owner">
            <summary>
            Gets or sets the owner user. Always set it with Oracle (otherwise you'll get SYS, MDSYS etc...)
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:DatabaseSchemaReader.IDatabaseReader.DatabaseSchema">
            <summary>
            Gets the database schema. Only call AFTER calling <see cref="M:DatabaseSchemaReader.IDatabaseReader.ReadAll"/> or one or more other methods such as <see cref="M:DatabaseSchemaReader.IDatabaseReader.AllTables"/>. A collection of Tables, Views and StoredProcedures. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateReferences(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to update object references after loaded. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateDataTypes(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to add datatypes from DbDataType string after loaded.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DatabaseReader"/> class. For Oracle, use the overload.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.#ctor(System.String,DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DatabaseReader"/> class for one of the standard providers.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="sqlType">Type of the SQL.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DatabaseReader"/> class. For Oracle, use this overload.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="owner">The schema owner.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.#ctor(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DatabaseReader"/> class using an existing <see cref="P:DatabaseSchemaReader.DatabaseReader.DatabaseSchema"/>.
            </summary>
            <param name="databaseSchema">The database schema. Can be a subclassed version.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.ReadAll">
            <summary>
            Gets all of the schema in one call. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.AllUsers">
            <summary>
            Gets the users (specifically for Oracle)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.TableList">
            <summary>
            Gets all tables (just names, no columns).
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.AllTables">
            <summary>
            Gets all tables (plus constraints, indexes and triggers).
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.AllViews">
            <summary>
            Gets all views.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.Table(System.String)">
            <summary>
            Gets the table. If <see cref="P:DatabaseSchemaReader.DatabaseReader.Owner"/> is specified, it is used.
            </summary>
            <param name="tableName">Name of the table. Oracle names can be case sensitive.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.StoredProcedureList">
            <summary>
            Gets all stored procedures (no arguments, for Oracle no packages)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.AllStoredProcedures">
            <summary>
            Gets all stored procedures (and functions) with their arguments
            </summary>
            <remarks>
            <para>We also get the source (if available)</para>
            <para>We don't get functions here.</para>
            <para>In Oracle stored procedures are often in packages. We read the non-packaged stored procedures, then add packaged stored procedures if they have arguments. If they don't have arguments, they are not found.</para>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.DataTypes">
            <summary>
            Gets all datatypes (and updates columns/arguments if already loaded)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DatabaseSchemaReader.DatabaseReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DatabaseSchemaReader.DatabaseReader.Exclusions">
            <summary>
            Exclude specified items when reading schema
            </summary>
            <value>
            The exclusions.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DatabaseReader.Owner">
            <summary>
            Gets or sets the owner user. Always set it with Oracle (otherwise you'll get SYS, MDSYS etc...)
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:DatabaseSchemaReader.DatabaseReader.DatabaseSchema">
            <summary>
            Gets the database schema. Only call AFTER calling <see cref="M:DatabaseSchemaReader.DatabaseReader.ReadAll"/> or one or more other methods such as <see cref="M:DatabaseSchemaReader.DatabaseReader.AllTables"/>. A collection of Tables, Views and StoredProcedures. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateReferences(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to update object references after loaded. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateDataTypes(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to add datatypes from DbDataType string after loaded.
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.ConstraintType">
            <summary>
            Type of constraint (primary key, foreign key...)
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.ConstraintType.PrimaryKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.ConstraintType.ForeignKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.ConstraintType.UniqueKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.ConstraintType.Check">
            <summary>
            
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.ConstraintType.Default">
            <summary>
            Default constraints (SQLServer)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseColumnExtensions">
            <summary>
            Helper methods for columns
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumnExtensions.DbDataTypeStandard(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Returns the DbDataType in a standard format (uppercased, any braces removed).
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
            <remarks>
            MySQL native types will be in the form "tinyint(5) unsigned". 
            For compatibility, this exposes "TINYINT" which matches what other databases use.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumnExtensions.DataTypeDefinition(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Data type definition (suitable for DDL).
            </summary>
            <param name="column">The column.</param>
            <returns>The full datatype specification (including length, precision/scale as applicable)</returns>
            <remarks>
            Uses column.DbDataType and column.DataType.
            When writing full DDL, use the SqlGen DataTypeWriters.
            </remarks>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity">
            <summary>
            Identity properties for a database column
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IsNonTrivialIdentity">
            <summary>
            Get non-triviality of an identity column
            </summary>
            <returns>True if the identity sequence does not start at 1 and increment by 1.</returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IdentitySeed">
            <summary>
            Gets or sets the seed value for an identity column (or equivalent)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IdentityIncrement">
            <summary>
            Gets or sets the identity increment for an identity column (or equivalent)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IdentityByDefault">
            <summary>
            Gets or sets if the identity is "BY DEFAULT" (only incremented if INSERT statement does not specify a value). Default is false (i.e. "ALWAYS")
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.NamedObject">
            <summary>
            A database object that should have an unique name within the collection
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.NamedObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.NamedObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.NamedObject.Name">
            <summary>
            Gets or sets the name (original database format)
            </summary>
            <value>
            The table name.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.NamedObject.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseArgument">
            <summary>
            An argument (in or out parameter) to a stored procedure or function.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.SchemaOwner">
            <summary>
            Gets or sets the schema owner.
            </summary>
            <value>
            The schema owner.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.ProcedureName">
            <summary>
            Gets or sets the name of the procedure.
            </summary>
            <value>
            The name of the procedure.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.PackageName">
            <summary>
            Gets or sets the name of the package (only used by Oracle).
            </summary>
            <value>
            The name of the package.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.DatabaseDataType">
            <summary>
            Gets or sets the dataType (string format).
            </summary>
            <value>The dataType.</value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.Ordinal">
            <summary>
            Gets or sets the ordinal position of the argument (1st, 2nd and so on).
            </summary>
            <value>
            The ordinal.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.In">
            <summary>
            Gets or sets a value indicating whether this is an input (or input output) parameter
            </summary>
            <value>
              <c>true</c> if in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.Out">
            <summary>
            Gets or sets a value indicating whether this is an output (or input output) parameter
            </summary>
            <value>
              <c>true</c> if out; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.DatabaseSchema">
            <summary>
            Gets or sets the database schema.
            </summary>
            <value>
            The database schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.DataType">
            <summary>
            Gets or sets the dataType. MAY BE NULL (eg Oracle REF CURSOR is not in datatypes list) - in which case refer to the string <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.DatabaseDataType"/>.
            </summary>
            <value>The dataType.</value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseArgument.NetName">
            <summary>
            Gets or sets the name of a .Net argument representing this specific argument.
            </summary>
            <value>
            The name of the net.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseColumn">
            <summary>
            A column in the database
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.NamedSchemaObject">
            <summary>
            A database object that has an unique schema and name
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.NamedSchemaObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.NamedSchemaObject.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.NamedSchemaObject.SchemaOwner">
            <summary>
            Gets or sets the schema owner.
            </summary>
            <value>
            The schema owner.
            </value>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseColumn"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumn.Clone">
            <summary>
            Shallow clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseColumn.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DbDataType">
            <summary>
            Gets or sets the database data type as a string (as defined by the database platform)
            </summary>
            <value>
            The type of the db data.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTableName">
            <summary>
            If <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsForeignKey"/> is true, gets or sets the name of the foreign key table. <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTable"/> may contain the actual table. If you have composite keys, consider <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTableNames"/> instead.
            </summary>
            <value>
            The name of the foreign key table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTableNames">
            <summary>
            If <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsForeignKey"/> is true, gets or sets the foreign key table names. If you have no composite keys, <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTableName"/> is sufficient.
            </summary>
            <value>
            The names of the foreign key table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Length">
            <summary>
            Gets or sets the length if this is string (VARCHAR) or character (CHAR) type data. In SQLServer, a length of -1 indicates VARCHAR(MAX).
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Nullable">
            <summary>
            Gets or sets a value indicating whether this is nullable.
            </summary>
            <value>
              <c>true</c> if nullable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Ordinal">
            <summary>
            Gets or sets the ordinal (the order that the columns were defined in the database).
            </summary>
            <value>
            The ordinal.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DefaultValue">
            <summary>
            Gets or sets a default value for the column. May be null.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Precision">
            <summary>
            Precision is the number of digits in a number. For example, the number 123.45 has a precision of 5 and a scale of 2.
            </summary>
            <value>
            The precision.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Scale">
            <summary>
            Scale is the number of digits to the right of the decimal point in a number. For example, the number 123.45 has a precision of 5 and a scale of 2.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DateTimePrecision">
            <summary>
            Gets or sets the date time precision (only Oracle).
            </summary>
            <value>
            The date time precision.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.TableName">
            <summary>
            Gets or sets the name of the parent table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentitySeed">
            <summary>
            Do not use. Initialize <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityDefinition"/> and access <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IdentitySeed"/>
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityIncrement">
            <summary>
            Do not use. Initialize <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityDefinition"/> and access <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumnIdentity.IdentityIncrement"/>
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityDefinition">
            <summary>
            Gets or sets the identity definition (if this is an Identity column). 
            Null if this is not an identity column (<see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsAutoNumber"/> is false), 
            or the database uses another method of autonumbering (<see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DefaultValue"/> or sequences).
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ComputedDefinition">
            <summary>
            Gets or sets the "computed" (or "virtual") definition.
            </summary>
            <value>
            The computed definition.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsForeignKey">
            <summary>
            Gets or sets a value indicating whether this column is a foreign key.
            </summary>
            <value>
            	<c>true</c> if this instance is foreign key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsAutoNumber">
            <summary>
            Gets or sets a value indicating whether this column is an autonumber column (identity or equivalent)
            </summary>
            <value>
            	<c>true</c> if this column is autonumber; otherwise, <c>false</c>.
            </value>
            <remarks>
            If the database supports true Identity autonumbering, there should be more details in <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityDefinition"/>. If this is an equivalent (e.g. using sequences), then <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IdentityDefinition"/> will be null.
            </remarks>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsIdentity">
            <summary>
            Gets or sets a value indicating whether this column is an identity column (or equivalent)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsIndexed">
            <summary>
            Gets or sets a value indicating whether this instance is indexed.
            </summary>
            <value>
            	<c>true</c> if this instance is indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether this instance is part of the primary key.
            </summary>
            <value>
            	<c>true</c> if this instance is primary key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsUniqueKey">
            <summary>
            Gets or sets a value indicating whether this instance is part of a unique key.
            </summary>
            <value>
            	<c>true</c> if this instance is unique key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.NetName">
            <summary>
            Gets or sets the column name in .Net (C#) compatible format.
            </summary>
            <value>
            The .net name
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.Table">
            <summary>
            Gets or sets the table reference. When converting from a database, only the string <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.TableName"/> is set; this object reference must be added (for example using <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer"/>)
            </summary>
            <value>
            The table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DatabaseSchema">
            <summary>
            Gets or sets the database schema. May be null for some platforms (SQLite, SqlServer CE)
            </summary>
            <value>
            The database schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTable">
            <summary>
            If <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsForeignKey"/> is true, gets or sets the foreign key table. <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.ForeignKeyTableName"/> contains the name of the table.
            </summary>
            <value>
            The foreign key table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseColumn.IsComputed">
            <summary>
            Gets a value indicating whether this column is "computed" or "virtual".
            </summary>
            <value>
            <c>true</c> if this column is computed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseConstraint">
            <summary>
            Represents a constraint (of <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ConstraintType"/> such as primary key, foreign key...) that is attached to <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.Columns"/> of a table with name <see cref="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.TableName"/>
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseConstraint"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ReferencedTable(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            If this is a foreign key constraint, gets or sets the foreign key table.
            </summary>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ReferencedColumns(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            If this is a foreign key constraint, gets the primary/unique key columns of a referenced table.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.TableName">
            <summary>
            Gets or sets the name of the parent table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.RefersToConstraint">
            <summary>
            If this is a foreign key constraint, gets or sets the constraint on the foreign key table (i.e. the primary key constraint).
            </summary>
            <value>
            The refers to constraint.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.RefersToTable">
            <summary>
            If this is a foreign key constraint, gets or sets the foreign key table name. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ReferencedTable(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to get the foreign key table.
            </summary>
            <value>
            The refers to table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.RefersToSchema">
            <summary>
            If this is a foreign key constraint, gets or sets the foreign key schema. Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ReferencedTable(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to get the foreign key table.
            </summary>
            <value>
            The refers to schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.DeleteRule">
            <summary>
            Gets or sets the delete rule. When a row is deleted from a parent table, the DeleteRule determines what will happen in the columns of the child table (or tables). If the rule is set to Cascade, child rows will be deleted. Other options are SET NULL, SET DEFAULT and NO ACTION.
            </summary>
            <value>
            The delete rule.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.UpdateRule">
            <summary>
            Gets or sets the update rule. When a row is updated in a parent table, the UpdateRule determines what will happen in the columns of the child table (or tables). Options are CASCADE, RESTRICT, NO ACTION, SET NULL, SET DEFAULT
            </summary>
            <value>
            The update rule.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.ConstraintType">
            <summary>
            Gets or sets the type of the constraint (primary key, foreign key, unique key, check)
            </summary>
            <value>
            The type of the constraint.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.Columns">
            <summary>
            Gets the columns. A check constraint has no columns.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseConstraint.Expression">
            <summary>
            Gets or sets the expression (check constraints only).
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseFunction">
            <summary>
            Represents a database function (that is, a stored procedure that returns a value)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure">
            <summary>
            Represents a stored procedure in the database.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.FullName">
            <summary>
            Gets the full name (including schema if applicable, and package if applicable)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.Package">
            <summary>
            Gets or sets the package.
            </summary>
            <value>
            The package.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.Sql">
            <summary>
            Gets or sets the body SQL.
            </summary>
            <value>
            The body SQL.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.Language">
            <summary>
            Gets or sets the language (for instance, PostgreSql).
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.ResultSets">
            <summary>
            Gets the result sets.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.DatabaseSchema">
            <summary>
            Gets or sets the database schema.
            </summary>
            <value>
            The database schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure.NetName">
            <summary>
            Gets or sets the name in .Net format (for a class representing the specific procedure)
            </summary>
            <value>
            The name of the net.
            </value>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseFunction.CheckArgumentsForReturnType">
            <summary>
            Checks the arguments for a return type and reassigns it. Once a return type is found, this doesn't do anything.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseFunction.ReturnType">
            <summary>
            Gets or sets the return type. Will be null for table-valued functions.
            </summary>
            <value>
            The return type.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseIndex">
            <summary>
            Represents an index in the database.
            </summary>
            <remarks>
            We don't capture if this is a UNIQUE or NONCLUSTERED index.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseIndex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseIndex"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseIndex.IndexedColumns(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Returns the columns of the parent table that are indexed.
            </summary>
            <param name="parentTable">The parent table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseIndex.IsUniqueKeyIndex(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Determines whether this index is the same as any unique key (including the primary key) for the table
            </summary>
            <param name="parentTable">The parent table.</param>
            <returns>
              <c>true</c> if is same as unique key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseIndex.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseIndex.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseIndex.IndexType">
            <summary>
            Gets or sets the type of the index.
            </summary>
            <value>
            The type of the index.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseIndex.IsUnique">
            <summary>
            Gets or sets whether this is a unique index
            </summary>
            <value>
              <c>true</c> if this index is unique; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseIndex.Columns">
            <summary>
            Gets the indexed columns.
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabasePackage">
            <summary>
            Represents a package in the database (in Oracle, a collection of stored procedures and functions)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabasePackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabasePackage"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabasePackage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabasePackage.Definition">
            <summary>
            Gets or sets the definition.
            </summary>
            <value>
            The definition.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabasePackage.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>
            The body.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabasePackage.StoredProcedures">
            <summary>
            Gets or sets the stored procedures.
            </summary>
            <value>
            The stored procedures.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabasePackage.Functions">
            <summary>
            Gets or sets the functions.
            </summary>
            <value>
            The functions.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabasePackage.NetName">
            <summary>
            Gets or sets the name for a .Net class representing this specific package
            </summary>
            <value>
            The name of the net.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseResultSet">
            <summary>
            Represents a result set of a stored procedure
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseResultSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseResultSet"/> class.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseResultSet.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseResultSet.NetName">
            <summary>
            Gets or sets the result set name in .Net (C#) compatible format.
            </summary>
            <value>
            The .net name
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSchema">
            <summary>
            The parent of all schema objects.
            </summary>
            <remarks>
            When initially populated, many of the objects (tables, stored procedures) are not linked.
            Use <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateReferences(DatabaseSchemaReader.DataSchema.DatabaseSchema)"/> to link things up
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchema.#ctor(System.String,DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchema"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="sqlType">Type of the provider</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchema.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchema"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchema.FindTableByName(System.String)">
            <summary>
            Finds a table by name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchema.FindTableByName(System.String,System.String)">
            <summary>
            Finds a table by name and schema
            </summary>
            <param name="name">The name.</param>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.DataTypes">
            <summary>
            Gets the data types.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.StoredProcedures">
            <summary>
            Gets the stored procedures.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Packages">
            <summary>
            Gets the packages.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Tables">
            <summary>
            Gets the tables.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Views">
            <summary>
            Gets the views.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Users">
            <summary>
            Gets the users.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Functions">
            <summary>
            Gets the functions.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Sequences">
            <summary>
            Gets the sequences.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSchema.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions">
            <summary>
            AddColumn extensions (on table and column)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.String)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data. Eg "INT", "VARCHAR(10)", "DECIMAL(10,2)"</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.Data.DbType)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/>.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.String,System.Action{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data. Eg "INT", "VARCHAR(10)", "DECIMAL(10,2)"</param>
            <param name="columnInitialization">The column initialization.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.Data.DbType,System.Action{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/>.</param>
            <param name="columnInitialization">The column initialization.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds a column to the parent table.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.String)">
            <summary>
            Adds a column to the parent table.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data. Eg "INT", "VARCHAR(10)", "DECIMAL(10,2)"</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.Data.DbType)">
            <summary>
            Adds a column.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/>.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.String,System.Action{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Adds a column to the parent table.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data. Eg "INT", "VARCHAR(10)", "DECIMAL(10,2)"</param>
            <param name="columnInitialization">The column initialization.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.Data.DbType,System.Action{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Adds the column.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/>.</param>
            <param name="columnInitialization">The column initialization.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn``1(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String)">
            <summary>
            Adds the column.
            </summary>
            <typeparam name="T">The specified .Net type (string, int, decimal)</typeparam>
            <param name="databasetable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Cannot map the CLR type to a database type</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn``1(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds the column.
            </summary>
            <typeparam name="T">The specified .Net type (string, int, decimal)</typeparam>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Cannot map the CLR type to a database type</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.Type)">
            <summary>
            Adds the column.
            </summary>
            <param name="databasetable">The database table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="netType">A CLR type (will attempt to translate to database type)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Cannot map the CLR type to a database type</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.Type)">
            <summary>
            Adds the column.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="columnName">Name of the column.</param>
            <param name="netType">A CLR type (will attempt to translate to database type)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Cannot map the CLR type to a database type</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddLength(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.Int32)">
            <summary>
            Adds a length to a column. Use -1 for MAX.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddPrecisionScale(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.Int32,System.Int32)">
            <summary>
            Adds a precision and scale to a column
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="precision">The precision (number of digits in a number)</param>
            <param name="scale">The scale (number of digits to the right of the decimal point)</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaAddColumnExtensions.AddNullable(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Make the column nullable.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions">
            <summary>
            Extensions to enable schema to be created with a simple fluent interface
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddPrimaryKey(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Makes this column the primary key (or part of a composite key)
            </summary>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddPrimaryKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Makes this column the primary key (or part of a composite key)
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="primaryKeyName">Name of the primary key.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddIdentity(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds the identity.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddForeignKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.String)">
            <summary>
            Adds a foreign key with a single column
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <param name="foreignTableName">Name of the foreign table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddForeignKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.String,System.String)">
            <summary>
            Adds a foreign key with a single column
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <param name="foreignTableName">Name of the foreign table.</param>
            <param name="foreignTableSchemaOwner">The foreign table schema owner.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            databaseColumn;databaseColumn must not be null
            or
            foreignTableName;foreignTableName must not be null
            </exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.FindByName(System.Collections.ObjectModel.ReadOnlyCollection{DatabaseSchemaReader.DataSchema.DatabaseConstraint},System.String)">
            <summary>
            Finds the constraint by name (case insensitive)
            </summary>
            <param name="collection">The collection.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddForeignKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String,System.Func{System.Collections.Generic.IEnumerable{DatabaseSchemaReader.DataSchema.DatabaseTable},DatabaseSchemaReader.DataSchema.DatabaseTable})">
            <summary>
            Adds a foreign key with a single column
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="foreignKeyName">Name of the foreign key.</param>
            <param name="foreignTable">The foreign table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddForeignKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds a foreign key with a single column (without a name)
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="foreignTableName">Name of the foreign table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddUniqueKey(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Makes this column a unique key.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddUniqueKey(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds a unique key.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="uniqueKeyName">Name of the unique key.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseConstraint,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="databaseConstraint">The database constraint.</param>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">databaseConstraint</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaConstraintExtensions.InverseForeignKeys(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Finds the individual foreign key constraints for a foreing key child
            </summary>
            <param name="table">The table.</param>
            <param name="foreignKeyChild">The foreign key child.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions">
            <summary>
            Extensions to enable schema to be created with a simple fluent interface
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.RemoveTable(DatabaseSchemaReader.DataSchema.DatabaseSchema,System.String)">
            <summary>
            Removes the table from the schema and also all foreign key references.
            </summary>
            <param name="databaseSchema">The database schema.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.RemoveTable(DatabaseSchemaReader.DataSchema.DatabaseSchema,DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Removes the table from the schema and also all foreign key references.
            </summary>
            <param name="databaseSchema">The database schema.</param>
            <param name="table">The table.</param>
            <exception cref="T:System.ArgumentNullException">databaseSchema;databaseSchema must not be null</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.AddTable(DatabaseSchemaReader.DataSchema.DatabaseSchema,System.String)">
            <summary>
            Adds a table.
            </summary>
            <param name="databaseSchema">The database schema.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.AddTable(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String)">
            <summary>
            Adds a table.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.AddTable(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds the table.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.AddIndex(DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Adds the index with the specified name. If the index with the same name exists, add the column to the index.
            </summary>
            <param name="databaseColumn">The database column.</param>
            <param name="indexName">Name of the index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">databaseColumn;databaseColumn must not be null</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.AddIndex(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.Collections.Generic.IEnumerable{DatabaseSchemaReader.DataSchema.DatabaseColumn})">
            <summary>
            Adds the index.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="indexName">Name of the index.</param>
            <param name="columns">The columns.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.IsManyToManyTable(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Determines whether is a many to many table (association or junction table joining two or more other tables in a many to many relationship)
            </summary>
            <param name="databaseTable">The database table.</param>
            <returns>
            	<c>true</c> if this is a many to many table; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.ManyToManyTraversal(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Via a many to many table, find the opposite many relationship
            </summary>
            <param name="manyToManyTable">The many to many table.</param>
            <param name="fromTable">From table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.IsSharedPrimaryKey(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Determines whether two tables are related one to one (shared primary keys)
            </summary>
            <param name="destination">The destination table (principal).</param>
            <param name="origin">The origin table (dependent, has foreign key relationship to principal).</param>
            <returns>
              <c>true</c> if this table's primary key is also a foreign key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaExtensions.FindInheritanceTable(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Finds the table that this inherits from (shared primary key)
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer">
            <summary>
            Fixes up schema internal references
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateReferences(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Updates the references of child objects to this database
            </summary>
            <remarks>
            Should be safe to call twice.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSchemaFixer.UpdateDataTypes(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Updates the datatypes of child objects to this database
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseSequence">
            <summary>
            Represents a sequence in the database (eg Oracle, SqlServer 2011)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseSequence.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSequence.MinimumValue">
            <summary>
            Gets or sets the mininum value.
            </summary>
            <value>
            The mininum value.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSequence.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseSequence.IncrementBy">
            <summary>
            Gets or sets the increment by.
            </summary>
            <value>
            The increment by.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseTable">
            <summary>
            A table in the database
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTable"/> class.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.AddConstraints(System.Collections.Generic.IEnumerable{DatabaseSchemaReader.DataSchema.DatabaseConstraint})">
            <summary>
            Adds the constraints of any type (primary key, foreign key, unique key, check)
            </summary>
            <param name="constraints">The constraints.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.AddConstraint(DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Adds the constraint of any type (primary key, foreign key, unique key, check)
            </summary>
            <param name="con">The constraint.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.RemoveForeignKey(DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Removes the foreign key and cleans the column markers.
            </summary>
            <param name="foreignKey">The foreign key.</param>
            <exception cref="T:System.ArgumentNullException">foreignKey;foreignkey cannot be null</exception>
            <exception cref="T:System.InvalidOperationException">Must be a foreign key</exception>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.AddIndex(DatabaseSchemaReader.DataSchema.DatabaseIndex)">
            <summary>
            Adds an index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.FindColumn(System.String)">
            <summary>
            Finds the column.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.DatabaseSchema">
            <summary>
            Gets or sets the database schema.
            </summary>
            <value>
            The database schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.NetName">
            <summary>
            Gets or sets the table name in .Net (C#) compatible format.
            </summary>
            <value>
            The .net name
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.PrimaryKeyColumn">
            <summary>
            Gets or sets the primary key column (assuming this isn't a composite key- check PrimaryKey.Columns.Count)
            </summary>
            <value>The primary key column.</value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.PrimaryKey">
            <summary>
            Gets or sets the primary key.
            </summary>
            <value>
            The primary key.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.ForeignKeys">
            <summary>
            Gets the foreign keys. Add using <see cref="M:DatabaseSchemaReader.DataSchema.DatabaseTable.AddConstraint(DatabaseSchemaReader.DataSchema.DatabaseConstraint)"/>.
            </summary>
            <value>
            The foreign keys.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.UniqueKeys">
            <summary>
            Gets or sets the unique keys.
            </summary>
            <value>
            The unique keys.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.CheckConstraints">
            <summary>
            Gets or sets the check constraints.
            </summary>
            <value>
            The check constraints.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.DefaultConstraints">
            <summary>
            Gets the default constraints.
            </summary>
            <value>
            The default constraints.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.ForeignKeyChildren">
            <summary>
            Gets the foreign key children.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.Triggers">
            <summary>
            Gets the triggers.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.Indexes">
            <summary>
            Gets or sets the indexes.
            </summary>
            <value>
            The indexes.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.HasCompositeKey">
            <summary>
            Gets a value indicating whether this instance has a composite key.
            </summary>
            <value>
            	<c>true</c> if this instance has a composite key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.HasAutoNumberColumn">
            <summary>
            Gets a value indicating whether this table has an autonumber column (identity or equivalent).
            </summary>
            <value>
            	<c>true</c> if this table has an autonumber column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTable.HasIdentityColumn">
            <summary>
            Gets a value indicating whether this instance has an identity column.
            </summary>
            <value>
            	<c>true</c> if this instance has an identity column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseTrigger">
            <summary>
            Represents a trigger in the database.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseTrigger.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTrigger.DatabaseSchema">
            <summary>
            Gets or sets the database schema.
            </summary>
            <value>
            The database schema.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTrigger.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>
            The name of the table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTrigger.TriggerBody">
            <summary>
            Gets or sets the trigger body.
            </summary>
            <value>
            The trigger body.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTrigger.TriggerEvent">
            <summary>
            Gets or sets the trigger event (INSERT, UPDATE, DELETE or a combination of these)
            </summary>
            <value>
            The trigger event.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseTrigger.TriggerType">
            <summary>
            Gets or sets the trigger type.
            </summary>
            <value>
            The trigger type.
            </value>
            <remarks>
            In oracle, one of BEFORE STATEMENT, BEFORE EACH ROW, AFTER STATEMENT, AFTER EACH ROW, INSTEAD OF, COMPOUND
            In SqlServer, our custom SQL uses AFTER and INSTEAD OF
            </remarks>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseUser">
            <summary>
            Represents a user in the database
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseUser.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseUser.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DatabaseView">
            <summary>
            Represents a view in the database
            </summary>
            <remarks>
            Essentially the same (and inherits from) a <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseTable"/>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DatabaseView.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DatabaseView.Sql">
            <summary>
            Gets or sets the DDL to create this view (if available)
            </summary>
            <value>The SQL.</value>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.DataType">
            <summary>
            Maps between database datatypes and .Net datatypes.
            </summary>
            <remarks>
            XmlSerializater won't work because TypeName and NetDataType are private
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DataType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.DataSchema.DataType"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="netDataType">Type of the net data.</param>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DataType.NetCodeName(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Gets the name of the C# net data type, correcting for the column properties
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DataType.NetCodeName(DatabaseSchemaReader.DataSchema.DatabaseArgument)">
            <summary>
            Gets the name of the C# net data type, correcting for the argument properties
            </summary>
            <param name="argument">The argument.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DataType.GetNetType">
            <summary>
            Gets the type of the net data type.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.DataSchema.DataType.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.TypeName">
            <summary>
            The provider-specific data type name.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.NetDataType">
            <summary>
            The name of the .NET Framework type of the data type.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.NetDataTypeCSharpName">
            <summary>
            Gets the name of the C# net data type.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsString">
            <summary>
            Returns if this is a System.String
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsStringClob">
            <summary>
            Returns if this is a large System.String (text, ntext, clob)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsDateTime">
            <summary>
            Gets a value indicating whether this instance is a datetime.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsFloat">
            <summary>
            Returns if this is a System.Single (float)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsInt">
            <summary>
            Returns if this is a System.Int32 (int)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.IsNumeric">
            <summary>
            Returns if this is a numeric value (int, float, decimal)
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.ProviderDbType">
            <summary>
            The provider-specific type value that should be used when specifying a parameter’s type. For example, SqlDbType.Money or OracleType.Blob.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.CreateFormat">
            <summary>
            Format string that represents how to add this column to a data definition statement, such as CREATE TABLE. For example, the SQL data type DECIMAL needs a precision and a scale. In this case, the format string would be “DECIMAL({0},{1})”.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.LiteralPrefix">
            <summary>
            LiteralPrefix. Eg in Oracle dates, TO_DATE('
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.DataSchema.DataType.LiteralSuffix">
            <summary>
            LiteralSuffix. Eg in Oracle dates, ','YYYY-MM-DD HH24:MI:SS')
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.DataSchema.SqlType">
            <summary>
            Database platform types supported for generating SQL.
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.SqlServer">
            <summary>
            Microsoft SQL Server (2005, 2008, 2008 R2) including Express versions
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.Oracle">
            <summary>
            Oracle platforms (Oracle 9- 11, including XE)
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.MySql">
            <summary>
            MySQL (v5 onwards as we assume support for stored procedures)
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.SQLite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.SqlServerCe">
            <summary>
             Microsoft SQL Server CE 4
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.PostgreSql">
            <summary>
            PostgreSql
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.DataSchema.SqlType.Db2">
            <summary>
            IBM DB2
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Data.Converter">
            <summary>
            Converts data to strings
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Data.Converter.#ctor(DatabaseSchemaReader.DataSchema.SqlType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Data.Converter"/> class.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <param name="dateTypes">The date types, required to distinguish DATE vs TIME</param>
        </member>
        <member name="M:DatabaseSchemaReader.Data.Converter.Convert(System.Type,System.Object,System.String)">
            <summary>
            Converts the specified data into a string
            </summary>
            <param name="type">The CLR type of the data.</param>
            <param name="data">The data.</param>
            <param name="columnName">Name of the column (optional, required to work out dateTime types)</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Data.InsertWriter">
            <summary>
            Writes SQL INSERT statements
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Data.InsertWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Data.InsertWriter"/> class. The databaseTable must have dataTypes (call DataReader.DataTypes()). Use this with <see cref="M:DatabaseSchemaReader.Data.InsertWriter.WriteInsert(System.Data.IDataRecord)"/>
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="sqlType">Type of the SQL.</param>
            <exception cref="T:System.ArgumentNullException">databaseTable</exception>
        </member>
        <member name="M:DatabaseSchemaReader.Data.InsertWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Data.InsertWriter"/> class.  Use this with <see cref="M:DatabaseSchemaReader.Data.InsertWriter.WriteInsert(System.Data.IDataRecord)"/>
            </summary>
            <param name="databaseTable">The databaseTable.</param>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:DatabaseSchemaReader.Data.InsertWriter.Write(DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Writes the INSERTs in the specified SQL dialect
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.InsertWriter.WriteInsert(System.Data.DataRow)">
            <summary>
            Writes the insert statement for the specified data.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.InsertWriter.WriteInsert(System.Data.IDataRecord)">
            <summary>
            Writes the insert statement for the specified data.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.Data.InsertWriter.IncludeIdentity">
            <summary>
            Include identity values in INSERTs
            </summary>
            <value>
              <c>true</c> if include identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.InsertWriter.IncludeBlobs">
            <summary>
            Include BLOB in INSERTS. This is only practical for small blobs for certain databases (eg it works in SqlServer Northwind).
            </summary>
            <value><c>true</c> if include blobs; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DatabaseSchemaReader.Data.ChangesWriter">
            <summary>
            Writes SQL INSERT/UPDATE/DELETE statements for each Row marked as changed.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ChangesWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Data.InsertWriter"/> class.
            </summary>
            <param name="databaseTable">The databaseTable.</param>
            <param name="dataTable">The data table.</param>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ChangesWriter.Write(DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Writes the INSERTs in the specified SQL dialect
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ChangesWriter.GetWhereClause(System.Data.DataRow)">
            <summary>
            Generates a where clause based on the original values in the DataRow.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ChangesWriter.IncludeIdentity">
            <summary>
            Include identity values in INSERTs
            </summary>
            <value>
              <c>true</c> if include identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ChangesWriter.IncludeBlobs">
            <summary>
            Include BLOB in INSERTS. This is only practical for small blobs for certain databases (eg it works in SqlServer Northwind).
            </summary>
            <value><c>true</c> if include blobs; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ChangesWriter.IncludeAllFieldsInWhereClause">
            <summary>
            Include all fields in the where clause instead of just primary keys.
            </summary>
            <value><c>true</c> if all fields; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ChangesWriter.IncludeAllFieldsInUpdate">
            <summary>
            Include all DataTable fields in UPDATES instead of just modified ones.
            </summary>
            <value><c>true</c> if all fields; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DatabaseSchemaReader.Data.Reader">
            <summary>
            Reads data from a table into a DataTable. SELECT statement is generated.
            </summary>
            <remarks>
            Uses the <see cref="T:DatabaseSchemaReader.SqlWriter"/> to generate the SELECT statement.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Data.Reader.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Data.Reader"/> class.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:DatabaseSchemaReader.Data.Reader.Read">
            <summary>
            Reads first x rows of data from the table into a DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.Reader.Read(System.Func{System.Data.IDataRecord,System.Boolean})">
            <summary>
            Reads data from the table and invokes a function. if the function returns FALSE execution stops. PageSize is not honored.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.Data.Reader.PageSize">
            <summary>
            Gets or sets the maximum number of records returned. Default is 1000, maximum is 10000.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="T:DatabaseSchemaReader.Data.ScriptWriter">
            <summary>
            Reads a database table schema and data, and writes data to INSERT statements (for copies or backup)
            </summary>
            <remarks>
            This wraps Reader and InsertWriter to provide a higher level API.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ScriptWriter.ReadTable(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.String)">
            <summary>
            Reads the table data and returns the INSERT statements
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ScriptWriter.ReadTable(System.String,System.String,System.String)">
            <summary>
            Reads the table schema and data and returns the INSERT statements
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Data.ScriptWriter.ReadTable(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String,System.String,System.Func{System.String,System.Boolean})">
            <summary>
            Reads the table data and invokes the function for each INSERT statement. The databaseTable must have dataTypes (call DataReader.DataTypes()).
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
            <param name="processRecord">The process record.</param>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ScriptWriter.PageSize">
            <summary>
            Gets or sets the maximum number of records returned. Default is 1000.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ScriptWriter.IncludeIdentity">
            <summary>
            Include identity values in INSERTs
            </summary>
            <value>
              <c>true</c> if include identity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Data.ScriptWriter.IncludeBlobs">
            <summary>
            Include BLOB in INSERTS. This is only practical for small blobs for certain databases (eg it works in SqlServer Northwind).
            </summary>
            <value><c>true</c> if include blobs; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DatabaseSchemaReader.Filters.Exclusions">
            <summary>
            Exclude specified items when reading schema
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Filters.Exclusions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Filters.Exclusions"/> class.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.Exclusions.TableFilter">
            <summary>
            Gets or sets the table filter.
            </summary>
            <value>
            The table filter.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.Exclusions.ViewFilter">
            <summary>
            Gets or sets the view filter.
            </summary>
            <value>
            The view filter.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.Exclusions.StoredProcedureFilter">
            <summary>
            Gets or sets the stored procedure filter.
            </summary>
            <value>
            The stored procedure filter.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.Exclusions.PackageFilter">
            <summary>
            Gets or sets the package filter.
            </summary>
            <value>
            The package filter.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.Filters.Filter">
            <summary>
            Exclude items when reading the schema
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.Filters.IFilter">
            <summary>
            Exclude specified items when readings schema
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Filters.IFilter.Exclude(System.String)">
            <summary>
            Excludes the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.IFilter.FilterExclusions">
            <summary>
            An exclusions list. The implementation may use simple names, regex strings, or not use this list at all.
            </summary>
            <value>
            The exclusions.
            </value>
        </member>
        <member name="M:DatabaseSchemaReader.Filters.Filter.Exclude(System.String)">
            <summary>
            Excludes the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.Filters.Filter.FilterExclusions">
            <summary>
            An exclusions list. The implementation may use simple names, regex strings, or not use this list at all.
            </summary>
            <value>
            The exclusions.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger">
            <summary>
            Use static <see cref="M:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger.FindTrigger(DatabaseSchemaReader.DataSchema.DatabaseTable)"/> to find an oracle autoNumber trigger.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger.FindTrigger(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Finds the trigger that uses a sequence for autonumbering. May return NULL.
            </summary>
            <param name="databaseTable">The database table.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger.DatabaseTrigger">
            <summary>
            Gets the database trigger.
            </summary>
            <value>
            The database trigger.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger.DatabaseSequence">
            <summary>
            Gets or sets the database sequence. Depending on trigger syntax, this may not be found.
            </summary>
            <value>
            The database sequence.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.ProviderSchemaReaders.OracleSequenceTrigger.SequenceName">
            <summary>
            Gets or sets the name of the sequence.
            </summary>
            <value>
            The name of the sequence.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.SchemaExtendedReader">
            <summary>
            Extended schema information beyond that included in GetSchema.
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SchemaReader">
             <summary>
             Simple access to database schemas in ADO.Net 2.0. 
             </summary>
             <remarks>
             Works for SqlServer, Oracle, OLEDB, ODBC, MySql and SQLite. Does not work for System.Data.SqlServerCe.3.5 which throws NotSupportedException.
             </remarks>
             <example>
             Form Load:
                DataTable dt = DbProviderFactories.GetFactoryClasses();
                ProviderName.DataSource = dt;
                ProviderName.DisplayMember = "InvariantName";
            
             After picked a provider from above list:
                SchemaReader schema = new SchemaReader(ConnectionString.Text, "System.Data.OracleClient");
                schema.ProviderName = ProviderName.Text;
                dataGrid1.DataSource = schema.Tables(); //a list of all tables
                dataGrid1.DataSource = schema.Columns("MYTABLENAME"); //a list of columns for a specific table
            </example>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.#ctor(System.String,System.String)">
            <summary>
            Constructor with connectionString and ProviderName
            </summary>
            <param name="connectionString">Eg "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=Northwind;"</param>
            <param name="providerName">ProviderInvariantName for the provider (eg System.Data.SqlClient or System.Data.OracleClient)</param>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Users">
            <summary>
            DataTable of all users
            </summary>
            <returns>Datatable with columns NAME, ID, CREATEDDATE</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Tables">
            <summary>
            DataTable of all tables for a specific owner
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Table(System.String)">
            <summary>
            Get all data for a specified table name.
            </summary>
            <param name="tableName">Name of the table. Oracle names can be case sensitive.</param>
            <returns>A dataset containing the tables: Columns, Indexes, IndexColumns, PrimaryKeys, ForeignKeys, ForeignKeyColumns</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.LoadTable(System.String,System.Data.DataSet,System.Data.Common.DbConnection)">
            <summary>
            Loads the table COLUMNS, INDEXES and INDEXCOLUMNS tables into a dataset.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="ds">The dataset.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Views">
            <summary>
            DataTable of all tables for a specific owner
            </summary>
            <returns>Datatable with columns OWNER, TABLE_NAME, TYPE</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Columns(System.String)">
            <summary>
            All the columns for a specific table
            </summary>
            <param name="tableName">Name of the table. Oracle names can be case sensitive.</param>
            <returns>DataTable columns incl. COLUMN_NAME, DATATYPE, LENGTH, PRECISION, SCALE, NULLABLE</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Columns(System.String,System.Data.Common.DbConnection)">
            <summary>
            Get the columns using GetSchema. Override to get additional stuff from Oracle.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Indexes(System.String)">
            <summary>
            Gets the indexes. 
            </summary>
            <param name="tableName">Name of the table (or null for all tables).</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Indexes(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets the indexes.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.IndexColumns(System.String)">
            <summary>
            Gets the indexed columns.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.PrimaryKeys(System.String)">
            <summary>
            Gets the primary keys
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.PrimaryKeys(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets the primary keys
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.ForeignKeys(System.String)">
            <summary>
            Finds the foreign keys. Usually just fk name and the table, not the columns (Oracle has ForeignKeyColumns). SqlServer doesn't even have the referenced table/ unique constraint. 
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.ForeignKeys(System.String,System.Data.Common.DbConnection)">
            <summary>
            Finds the foreign keys.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.ForeignKeyColumns(System.String)">
            <summary>
            Finds the foreign key columns. SqlServer doesn't have this collection.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.ForeignKeyColumns(System.String,System.Data.Common.DbConnection)">
            <summary>
            Finds the foreign key columns.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.UniqueKeys(System.String)">
            <summary>
            The Unique Key columns for a specific table  (if tableName is null or empty, all constraints are returned).
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.UniqueKeys(System.String,System.Data.Common.DbConnection)">
            <summary>
            The Unique Key columns for a specific table  (if tableName is null or empty, all constraints are returned).
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.CheckConstraints(System.String)">
            <summary>
            The check constraints for a specific table (if tableName is null or empty, all check constraints are returned)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.CheckConstraints(System.String,System.Data.Common.DbConnection)">
            <summary>
            The check constraints for a specific table (if tableName is null or empty, all check constraints are returned)
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Sequences">
            <summary>
            Gets the sequences (if supported, eg Oracle)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Sequences(System.Data.Common.DbConnection)">
            <summary>
            Gets the sequences (if supported, eg Oracle)
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Triggers(System.String)">
            <summary>
            Gets the triggers (if supported)
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Triggers(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets the triggers (if supported)
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.GenericCollection(System.String,System.Data.Common.DbConnection,System.String)">
            <summary>
            Retrieve a generic collection.
            </summary>
            <param name="collectionName">Name of the collection.</param>
            <param name="connection">The connection.</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Functions">
            <summary>
            Get all the functions (always empty except for Oracle, as the others mix stored procedures and functions).
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Functions(System.Data.Common.DbConnection)">
            <summary>
            Get all the functions (always empty except for Oracle, as the others mix stored procedures and functions).
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.StoredProcedures">
            <summary>
            Get all the stored procedures (owner required for Oracle- otherwise null).
            NB: in oracle does not get stored procedures in packages
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.StoredProcedures(System.Data.Common.DbConnection)">
            <summary>
            Get all the stored procedures (owner required for Oracle- otherwise null).
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.StoredProcedureArguments(System.String)">
            <summary>
            Get all the arguments for a stored procedures (or all sprocs)
            NB: in oracle we get arguments for sprocs in packages. This is slow.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.StoredProcedureArguments(System.String,System.Data.Common.DbConnection)">
            <summary>
            Get all the arguments for a stored procedures (or all sprocs)
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="connection">The open connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.PackageStoredProcedureArguments(System.String)">
            <summary>
            Get all the arguments for a package (or all packs)
            Package is only for Oracle - for SqlServer it's all sprocs
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Packages">
            <summary>
            Get all the packages (Oracle only concept- returns empty DataTable for others)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.CreateDataTable(System.String)">
            <summary>
            Creates a data table with the designated name
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.SchemaCollectionExists(System.Data.Common.DbConnection,System.String)">
            <summary>
            check is a schema collection exists.
            </summary>
            <param name="connection">The connection.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.MetadataCollections">
            <summary>
            All the collections that are available via GetSchema
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.DataTypes">
            <summary>
            All the Datatypes in the database and the mappings to .Net types
            </summary>
            <returns>DataTable with columns incl. TYPENAME, DataType (.net)</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.DataTypes(System.Data.Common.DbConnection)">
            <summary>
            All the Datatypes in the database and the mappings to .Net types
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DatabaseSchemaReader.SchemaReader.Owner">
            <summary>
            Gets or sets the owner (for Oracle) /schema (for SqlServer) / database (MySql). Always set it with Oracle; if you use other than dbo in SqlServer you should also set it. 
            If it is null or empty, all owners are returned.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SchemaReader.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SchemaReader.ProviderName">
            <summary>
            Gets the invariant name of the provider.
            </summary>
            <value>
            The name of the provider.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.SchemaReader.ProviderType">
            <summary>
            Gets the type of the provider (if a known type)
            </summary>
            <value>
            The type of the provider.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.SchemaReader.Factory">
            <summary>
            Gets the DbProviderFactory.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.#ctor(System.String,System.String)">
            <summary>
            Constructor with connectionString and ProviderName
            </summary>
            <param name="connectionString">Eg "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=Northwind;"</param>
            <param name="providerName">ProviderInvariantName for the provider (eg System.Data.SqlClient or System.Data.OracleClient)</param>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.Table(System.String)">
            <summary>
            Get all data for a specified table name.
            </summary>
            <param name="tableName">Name of the table. Oracle names can be case sensitive.</param>
            <returns>A dataset containing the tables: Columns, Primary_Keys, Foreign_Keys, Unique_Keys (only filled for Oracle), Indexes, IndexColumns, Triggers</returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.IdentityColumns(System.String)">
            <summary>
            Finds the column identities.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.TableDescription(System.String)">
            <summary>
            Finds the table descriptions.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.ColumnDescription(System.String)">
            <summary>
            Finds the column descriptions.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.SchemaDataTypes">
            <summary>
            If there are no datatypes, call this to load them directly
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.ViewColumns(System.String)">
            <summary>
            Get the columns of a view.
            </summary>
            <param name="viewName">Name of the view.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.ComputedColumns(System.String)">
            <summary>
            Gets all the "computed" (or "virtual") columns
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.ComputedColumns(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets all the "computed" (or "virtual") columns
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaExtendedReader.ServerVersion">
            <summary>
            Gets the database version string
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.ProviderSchemaReaders.SqlServerSchemaReader.SqlServerVersion(System.Data.Common.DbConnection)">
            <summary>
            returns the SqlServer version (10 is SqlServer 2008). 
            </summary>
            <param name="connection">The connection (must be OPEN).</param>
            <returns>9 is SqlServer 2005, 10 is SqlServer 2008, 11 is SqlServer 2012, 12 is SqlServer 2014</returns>
        </member>
        <member name="T:DatabaseSchemaReader.ProviderSchemaReaders.VistaDbSchemaReader">
            <summary>
            Support for VistaDB database
            </summary>
        </member>
        <member name="F:DatabaseSchemaReader.ProviderSchemaReaders.OracleSchemaReader._version">
            <summary>
            The database version.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.ProviderSchemaReaders.OracleSchemaReader.Version(System.Data.Common.DbConnection)">
            <summary>
            Parse out the server version (9, 10, 11 or 12, hopefully)
            </summary>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.ProviderSchemaReaders.OracleSchemaReader.LooksLikeAutoNumberDefaults(System.String)">
            <summary>
            Does the column default value look like a sequence allocation ("mysequence.NextVal")?
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.ProviderSchemaReaders.PostgreSqlArgumentReader">
            <summary>
            Reads the arguments for all functions
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DataTypeConverter.AddDataType(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds a dataType object to a column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ConstraintWriterBase.WriteTableConstraints">
            <summary>
            Writes the table-specific constraints (primary key, unique, constraint)
            </summary>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.IDataTypeWriter">
            <summary>
            Consistency for the data type converter classes
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IDataTypeWriter.WriteDataType(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Writes the data as a string (suitable for column DDL)
            </summary>
            <param name="column">The column.</param>
            <returns>A string</returns>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.IMigrationGenerator">
            <summary>
            Performs simple database schema migrations
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddTable(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Adds the table. If any primary key, unqiue or check constraints are attached, they are written too (don't write them individually). Foreign keys must be added separately (use <see cref="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddConstraint(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)"/>)
            </summary>
            <param name="databaseTable">The database table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Adds the column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AlterColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Alters the column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <param name="originalColumn">The original column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.RenameColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Renames the column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <param name="originalColumnName">The original column name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Drops the column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropDefault(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Drops the default value of a column
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.RenameTable(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String)">
            <summary>
            Renames the table (if available)
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="originalTableName">Name of the original table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropTable(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Drops the table.
            </summary>
            <param name="databaseTable">The database table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddConstraint(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Adds the constraint.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropConstraint(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseConstraint)">
            <summary>
            Drops the constraint.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="constraint">The constraint.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddView(DatabaseSchemaReader.DataSchema.DatabaseView)">
            <summary>
            Adds the view.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropView(DatabaseSchemaReader.DataSchema.DatabaseView)">
            <summary>
            Drops the view.
            </summary>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddProcedure(DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure)">
            <summary>
            Adds the procedure.
            </summary>
            <param name="procedure">The procedure.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropProcedure(DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure)">
            <summary>
            Drops the procedure.
            </summary>
            <param name="procedure">The procedure.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddIndex(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseIndex)">
            <summary>
            Adds the index.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropIndex(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseIndex)">
            <summary>
            Drops the index.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddTrigger(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseTrigger)">
            <summary>
            Adds the trigger.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="trigger">The trigger.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropTrigger(DatabaseSchemaReader.DataSchema.DatabaseTrigger)">
            <summary>
            Drops the trigger.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.RunStatements">
            <summary>
            Runs a batch of statements. May be needed before a script block.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropSequence(DatabaseSchemaReader.DataSchema.DatabaseSequence)">
            <summary>
            Drops the sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddSequence(DatabaseSchemaReader.DataSchema.DatabaseSequence)">
            <summary>
            Adds the sequence.
            </summary>
            <param name="sequence">The sequence.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropFunction(DatabaseSchemaReader.DataSchema.DatabaseFunction)">
            <summary>
            Drops the function.
            </summary>
            <param name="databaseFunction">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddFunction(DatabaseSchemaReader.DataSchema.DatabaseFunction)">
            <summary>
            Adds the function.
            </summary>
            <param name="databaseFunction">The function.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.DropPackage(DatabaseSchemaReader.DataSchema.DatabasePackage)">
            <summary>
            Drops the package.
            </summary>
            <param name="databasePackage">The package.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IMigrationGenerator.AddPackage(DatabaseSchemaReader.DataSchema.DatabasePackage)">
            <summary>
            Adds the package.
            </summary>
            <param name="databasePackage">The package.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IMigrationGenerator.IncludeSchema">
            <summary>
            Include the schema when writing migration sql. Default true (except if detects SQLite, SqlServerCE)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MigrationGenerator.RenameColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Renames the column.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <param name="originalColumnName">The original column name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MigrationGenerator.RenameColumnTo(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn,System.String)">
            <summary>
            Standard "Rename Column x To y" syntax for those that support it.
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="databaseColumn">The database column.</param>
            <param name="originalColumnName">Name of the original column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MigrationGenerator.RenameTable(DatabaseSchemaReader.DataSchema.DatabaseTable,System.String)">
            <summary>
            Renames the table (if available)
            </summary>
            <param name="databaseTable">The database table.</param>
            <param name="originalTableName">Name of the original table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MigrationGenerator.TableName(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Gets the escaped table name (prefixed with schema if present)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MigrationGenerator.SchemaPrefix(System.String)">
            <summary>
            If there is a schema (eg "dbo") returns it escaped with trailing dot ("[dbo].")
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.MigrationGenerator.IncludeSchema">
            <summary>
            Include the schema when writing table. Must not be set for SQLite as there is no schema.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.MigrationGenerator.AlterColumnIncludeDefaultValue">
            <summary>
            Sql Server cannot change default values in ALTER COLUMN statements (they are constraints)
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase">
            <summary>
             Generate stored procedures (standard CRUD types including paging)
            </summary>
             <remarks>
             Override this with platform specific procedure generators
             </remarks>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.IProcedureGenerator">
            <summary>
            Generate simple CRUD stored procedures
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IProcedureGenerator.WriteToFolder(System.String)">
            <summary>
            Writes to folder.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.IProcedureGenerator.WriteToScript(System.String)">
            <summary>
            Writes to script.
            </summary>
            <param name="scriptPath">The script path.</param>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IProcedureGenerator.FormatParameter">
            <summary>
            Optionally override how column parameters are formatted
            </summary>
            <value>The format parameter function.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IProcedureGenerator.ManualPrefix">
            <summary>
            Gets or sets the manual prefix.
            </summary>
            <value>The manual prefix.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IProcedureGenerator.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IProcedureGenerator.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.IProcedureGenerator.CursorParameterName">
            <summary>
            Gets or sets the name of the cursor parameter. In Oracle, defaults to Result.
            </summary>
            <value>The name of the cursor parameter.</value>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.WriteToFolder(System.String)">
            <summary>
            Writes to folder.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.WriteToScript(System.String)">
            <summary>
            Writes to script.
            </summary>
            <param name="scriptPath">The script path.</param>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.FormatParameter">
            <summary>
            Optionally override how column parameters are formatted
            </summary>
            <value>The format parameter function.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.ManualPrefix">
            <summary>
            Gets or sets the manual prefix.
            </summary>
            <value>The manual prefix.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ProcedureGeneratorBase.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.IProcedureWriter">
            <summary>
            Write a stored procedure
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.ITableGenerator">
            <summary>
            Generate a table DDL
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ITableGenerator.Write">
            <summary>
            Writes the DDL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ITableGenerator.WriteColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Writes the column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ITableGenerator.IncludeSchema">
            <summary>
            Indicates whether schema will be written in DDL
            </summary>
            <value><c>true</c> if schema is written; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ITableGenerator.IncludeDefaultValues">
            <summary>
            Gets or sets a value indicating whether to include default values while writing column definitions
            </summary>
            <value>
            <c>true</c> if include default values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.ITablesGenerator">
            <summary>
            Generate Ddl for all tables in schema.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.ITablesGenerator.Write">
            <summary>
            Writes this ddl script.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.ITablesGenerator.IncludeSchema">
            <summary>
            Indicates whether schema will be written in DDL
            </summary>
            <value><c>true</c> if schema is written; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.PostgreSql.AutoIncrementWriter">
            <summary>
            Turn a column defined as IDENTITY into a PostgreSql sequence
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlTranslator">
            <summary>
            Utilities to translate provider-specific SQL
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlTranslator.Fix(System.String)">
            <summary>
            Sanitizes a SQL string (don't use GetDate(), remove parenthesis) 
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlTranslator.EnsureCurrentTimestamp(System.String)">
            <summary>
            SqlServer GetDate() function should be SQL-92 Current_Timestamp (also supported in SqlServer)
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlTranslator.IsGuidGenerator(System.String)">
            <summary>
            Determines whether the default value is a GUID generator
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>
              <c>true</c> if is a GUID generator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.DiscoverProviderFactory">
            <summary>
            A simple tool to discover what an ADO provider GetSchema provides
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.DiscoverProviderFactory.Discover(System.String,System.String)">
            <summary>
            Discovers the specified connection string. NO ERROR TRAPPING.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.DummyDataCreator">
            <summary>
            Helpers to create dummy data (for testing)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.DummyDataCreator.CreateData(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Creates sample data from a <see cref="T:DatabaseSchemaReader.DataSchema.DataType"/>
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Column is a non-nullable foreign key</exception>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.DummyDataCreator.CreateData(DatabaseSchemaReader.DataSchema.DataType,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates sample data from a <see cref="T:DatabaseSchemaReader.DataSchema.DataType"/>
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="maxLength">Maximum length of a string</param>
            <param name="precision">The precision (total digits).</param>
            <param name="scale">The scale (digits after decimal point).</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.EntityFrameworkImporter">
            <summary>
            Convert an EF storage model into a DSR schema model.
            </summary>
            <remarks>You can inherit from this and override <see cref="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.FixColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn)"/></remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.ReadEdmx(System.String)">
            <summary>
            Reads the EDMX xml.
            </summary>
            <param name="edmxFilePath">The edmx file path.</param>
            <returns>A <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchema"/></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.ReadEdmx(System.Xml.Linq.XDocument)">
            <summary>
            Reads the edmx from an xml document
            </summary>
            <param name="edmx">The edmx.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">No edmx document</exception>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.ReadSsdl(System.String)">
            <summary>
            Reads the SSDL xml.
            </summary>
            <param name="ssdlFilePath">The SSDL file path.</param>
            <returns>A <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchema"/></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.ReadSsdl(System.Xml.Linq.XDocument)">
            <summary>
            Reads the SSDL.
            </summary>
            <param name="ssdlDocument">The SSDL document.</param>
            <returns>A <see cref="T:DatabaseSchemaReader.DataSchema.DatabaseSchema"/></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.EntityFrameworkImporter.FixColumn(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Correct the column datatype and related properties
            </summary>
            <param name="column">The column.</param>
            <remarks>Extension point: inherit this class and override this</remarks>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.FactoryTools">
            <summary>
            Tools to help with DbProviderFactory
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.FactoryTools.GetFactory(System.String)">
            <summary>
            Finds the factory.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.FactoryTools.AddFactory(System.Data.Common.DbProviderFactory)">
            <summary>
            Adds an existing factory. Call this before creating the DatabaseReader or SchemaReader.  Use with care!
            </summary>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">schemaReader</exception>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.FactoryTools.Providers">
            <summary>
            List of all the valid Providers. Use the ProviderInvariantName to fill ProviderName property
            </summary>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.SchemaTablesSorter">
            <summary>
            Sort the tables in a database schema by foreign key dependency order.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.SchemaTablesSorter.TopologicalSort(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Sorts tables by the foreign key dependencies.
            </summary>
            <param name="databaseSchema">The database schema.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.ScriptTools">
            <summary>
            Help with scripts. Likely to be changed to do more simple scripting
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.ScriptTools.SplitScript(System.String)">
            <summary>
            Splits the SQL server script using the GO lines.
            </summary>
            <param name="script">The script.</param>
            <returns></returns>
            <remarks>
            You can't execute a script with "GO" lines against SQLServer in ADO.
            This splits the sections into executable parts.
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.Utilities.ScriptTools.SplitBySemicolon(System.String)">
            <summary>
            Splits the script using the ; (required for Oracle)
            </summary>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.Utilities.TopologicalSorter">
            <summary>
            Sorts a graph by the dependencies.
            </summary>
            <remarks>
            Copied directly from http://tawani.blogspot.com/2009/02/topological-sorting-and-cyclic.html
            (in turn from a Java example).
            </remarks>
        </member>
        <member name="T:DatabaseSchemaReader.Procedures.ResultSetReader">
            <summary>
            Reads the result sets from stored procedures. NB: this executes the sprocs, in a rolled-back transaction.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Procedures.ResultSetReader.#ctor(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.Procedures.ResultSetReader"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:DatabaseSchemaReader.Procedures.ResultSetReader.Execute">
            <summary>
            Calls each procedure to find the result type.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.Procedures.ResultSetReader.ExecuteProcedure(DatabaseSchemaReader.DataSchema.DatabaseStoredProcedure)">
            <summary>
            Calls the specified procedure to find the result type.
            </summary>
            <param name="procedure">The procedure.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaRestrictions.ForOwner(System.Data.Common.DbConnection,System.String)">
            <summary>
            Get the schema/ owner restriction. This is the simplest.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaRestrictions.ForTable(System.Data.Common.DbConnection,System.String,System.String)">
            <summary>
            Get the schema/ owner restriction with schema/ owner and tableName. There are multiple aliases for table name.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaRestrictions.GetSchemaRestrictions(System.Data.Common.DbConnection,System.String,System.String,System.String[])">
            <summary>
            Gets the schema restrictions. There are different restrictions for each dataprovider :(
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaRestrictions.GetRestrictions(System.Data.Common.DbConnection,System.String)">
            <summary>
            Gets all the restrictions. Caches it.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SchemaRestrictions.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory">
            <summary>
            Generate Ddl
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.#ctor(DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory"/> class.
            </summary>
            <param name="sqlType">Type of the SQL.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.TableGenerator(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Creates a table DDL generator.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.AllTablesGenerator(DatabaseSchemaReader.DataSchema.DatabaseSchema)">
            <summary>
            Creates a DDL generator for all tables.
            </summary>
            <param name="schema">The schema.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.ProcedureGenerator(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Creates a stored procedure generator for a table.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.ConstraintWriter(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Internal method to find constraint writer
            </summary>
            <param name="databaseTable">The database table.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.DdlGeneratorFactory.MigrationGenerator">
            <summary>
            Creates a migration generator (Create Tables, add/alter/drop columns)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MySql.DataTypeWriter.WriteDataType(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Gets the MySql datatype definition as string
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.MySql.ProcedureGenerator">
            <summary>
            Generate MySql stored procedures.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.MySql.ProcedureWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Special constructor for functions
            </summary>
            <param name="procName">Name of the procedure.</param>
            <param name="isFunction">if set to <c>true</c> if is function, rather than procedure.</param>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.Oracle.AutoIncrementWriter">
            <summary>
            Turn a column defined as IDENTITY into Oracle Sequence/Trigger
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.Oracle.DataTypeWriter">
            <summary>
            Returns a datatype string (will convert common Oracle types to SqlServer)
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.Oracle.DataTypeWriter.OracleDataType(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Gets the Oracle datatype definition as string
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.Oracle.ProcedureGenerator">
            <summary>
            Generate Oracle stored procedures.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.Oracle.ProcedureGenerator.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.SqlGen.Oracle.ProcedureGenerator"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.Oracle.ProcedureGenerator.PackageName">
            <summary>
            Gets or sets the name of the package. Defaults to PACK_tablename
            </summary>
            <value>The name of the package.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.Oracle.ProcedureGenerator.CursorParameterName">
            <summary>
            Gets or sets the name of the cursor parameter. Defaults to Result.
            </summary>
            <value>The name of the cursor parameter.</value>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlServer.DataTypeWriter">
            <summary>
            Returns a datatype string (will convert common Oracle types to SqlServer)
            </summary>
            <remarks>
            <see cref="T:DatabaseSchemaReader.SqlGen.SqlServerCe.DataTypeWriter"/> is derived from this for SqlServerCe
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlServer.DataTypeWriter.WriteDataType(DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            Gets the SQLServer datatype definition as string
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlServer.DataTypeWriter.LooksLikeOracleIdentityColumn(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.DatabaseColumn)">
            <summary>
            If a table has a trigger, we assume it's an Oracle trigger/sequence which is translated to identity for the primary key
            </summary>
            <param name="table">The table.</param>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlServer.ForeignKeyGenerator">
            <summary>
            Generates foreign keys
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlServer.ProcedureGenerator">
            <summary>
            Generate SqlServer stored procedures.
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlGen.SqlServer.ProcedureGenerator.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.SqlGen.SqlServer.ProcedureGenerator"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.SqlServer.TableGenerator.SupportsNextValueForSequence">
            <summary>
            Gets a value indicating whether supports "next value for [sequence]" (SQLServer 2012+). Not publicly changeable here, yet...
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlServerCe.DataTypeWriter">
            <summary>
            SqlServer CE is a subset of SqlServer, so we derive from it and downgrade certain types
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlGen.SqlServerCe.TableGenerator">
            <summary>
            Table generator based on full SqlServer but using a derived DataTypeWriter for the subset of datatypes
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SqlGen.SqlServerCe.TableGenerator.SupportsNextValueForSequence">
            <summary>
            Gets a value indicating whether supports "next value for [sequence]" (SQLServer 2012+). 
            </summary>
        </member>
        <member name="T:DatabaseSchemaReader.SqlWriter">
            <summary>
            Writes simple SQL statements
            </summary>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.#ctor(DatabaseSchemaReader.DataSchema.DatabaseTable,DatabaseSchemaReader.DataSchema.SqlType)">
            <summary>
            Initializes a new instance of the <see cref="T:DatabaseSchemaReader.SqlWriter"/> class.
            </summary>
            <param name="table">The table.</param>
            <param name="sqlType">Type of the SQL.</param>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.ParameterName(System.String)">
            <summary>
            Formats a column name as a parameter.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.EscapedColumnName(System.String)">
            <summary>
            Gets the escaped name of a column (or other simple schema object)
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.GetColumns">
            <summary>
            Gets the columns except identity and timestamps (ie for Insert)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SimpleFormat(System.String)">
            <summary>
            Simplify the format- no line breaks, collapse spaces.
            </summary>
            <param name="sql">The SQL.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SelectByIdSql">
            <summary>
            SQL for select by primary key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SelectAllSql">
            <summary>
            SQL for select all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SelectPageSql">
            <summary>
            Paged select. Requires input params: currentPage (1-based), pageSize.
            </summary>
            <returns></returns>
            <remarks>
            MySql important: add Allow User Variables=True to connection string
            <para>SqlServerCe: use input params offset and pageSize</para>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SelectPageStartToEndRowSql">
            <summary>
            Paged select. Requires input params: startRow (1 based), endRow.
            </summary>
            <returns></returns>
            <remarks>
            MySql important: add Allow User Variables=True to connection string
            <para>SqlServerCe: use input params offset and pageSize</para>
            </remarks>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.SelectWhereSql(System.String)">
            <summary>
            SQL for select with where clause for specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.CountSql">
            <summary>
            SQL for count all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.CountSql(System.String)">
            <summary>
            SQL for count all with output parameter.
            </summary>
            <param name="outputParameter">The output parameter.</param>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.DeleteSql">
            <summary>
            SQL for delete by primary key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.InsertSql">
            <summary>
            SQL for insert new row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.InsertSqlIncludingIdentity">
            <summary>
            SQL for insert new row including any identity column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.InsertSqlWithoutOutputParameter">
            <summary>
            SQL for insert new row without output parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.FindIdentityParameter">
            <summary>
            Finds the identity parameter. May be null if no identity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DatabaseSchemaReader.SqlWriter.UpdateSql">
            <summary>
            SQL for update row.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DatabaseSchemaReader.SqlWriter.InStoredProcedure">
            <summary>
            In stored procedures, Oracle and MySql do not use the parameter prefix. Ignored for SqlServer (which requires @).
            </summary>
            <value><c>true</c> if in stored procedure; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlWriter.EscapedTableName">
            <summary>
            Gets the escaped name of the table, including schema if present
            </summary>
            <value>
            The name of the escaped table.
            </value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlWriter.FormatParameter">
            <summary>
            Optionally override how column parameters are formatted
            </summary>
            <value>The format parameter function.</value>
        </member>
        <member name="P:DatabaseSchemaReader.SqlWriter.PrimaryKeys">
            <summary>
            Gets the primary keys.
            </summary>
        </member>
        <member name="P:DatabaseSchemaReader.SqlWriter.NonPrimaryKeyColumns">
            <summary>
            Gets the non primary key columns.
            </summary>
        </member>
    </members>
</doc>
